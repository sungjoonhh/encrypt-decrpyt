using System;

using System.ComponentModel;

using System.Data;

using System.Drawing;

using System.Text;

using System.Windows.Forms;

using System.Net;

using System.Net.Sockets;





using System.Security.Cryptography;

using System.IO;



namespace AsyncTest

{

    public partial class Form1 : Form

    {

        private Socket clientSock;  /* client Socket */

        private Socket cbSock;      /* client Async Callback Socket */

        private byte[] recvBuffer;



        private const int MAXSIZE = 514;  /* 4096  */

        private string HOST = "xxx.xxx.xxx.xxx";

        private int PORT = 123;

        private string Enter_key;

        private string recvString;



        public Form1()

        {

            InitializeComponent();

            recvBuffer = new byte[MAXSIZE];



            this.DoInit();

        }





        //소켓 생성및 연결

        public void DoInit()

        {

            clientSock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            this.BeginConnect();

        }





        /*----------------------*

   *  Connection  *

   *----------------------*/



        public void BeginConnect()

        {



            tbDebug.Text = "서버 접속 대기 중";

            try

            {

                clientSock.BeginConnect(HOST, PORT, new AsyncCallback(ConnectCallBack), clientSock);

            }

            catch (SocketException se)

            {

                /*서버 접속 실패 */

                tbDebug.Text += "\r\n서버접속 실패하였습니다. " + se.NativeErrorCode;

                this.DoInit();



            }



        }



        /*----------------------*

   * ##### CallBack ##### *

   *  Connection  *

   *----------------------*/

        private void ConnectCallBack(IAsyncResult IAR)

        {

            try

            {

                // 보류중인 연결을 완성

                Socket tempSock = (Socket)IAR.AsyncState;

                IPEndPoint svrEP = (IPEndPoint)tempSock.RemoteEndPoint;



                tbDebug.Text += "\r\n 서버로 접속 성공 : " + svrEP.Address;



                tempSock.EndConnect(IAR);

                cbSock = tempSock;

                cbSock.BeginReceive(this.recvBuffer, 0, recvBuffer.Length, SocketFlags.None,

                                    new AsyncCallback(OnReceiveCallBack), cbSock);

            }

            catch (SocketException se)

            {

                if (se.SocketErrorCode == SocketError.NotConnected)

                {

                    tbDebug.Text += "\r\n서버 접속 실패 CallBack " + se.Message;

                    this.BeginConnect();

                }

            }

        }



        /*----------------------*

         *     Send   *

         *----------------------*/

        public void BeginSend(string message)

        {

            tbDebug.Text += "\r\n\r\n--------------  S  E  N  D  ----------------";

            tbDebug.Text += "\r\n\r\nSEND DATA : " + message;

            try

            {

                /* 연결 성공시 */

                if (clientSock.Connected)

                {

                    //키보드를 통해 입력한 데이터를 암호화 한다. 뒤의 숫자는 암호화에 쓰일 key이다.

                    string chiper = AES_encrypt(message, "01234567890123456789012345678901");

                    //데이터는 byte[]로 보내야하기 때문에 string -> byte

                    byte[] buffer = Encoding.UTF8.GetBytes(chiper);

                    //데이터 전송

                    clientSock.BeginSend(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(SendCallBack), chiper);

                }

            }

            catch (SocketException e)

            {

                tbDebug.Text = "\r\n\r\n전송 에러 : " + e.Message;

            }

        }



        /*----------------------*

   * ##### CallBack ##### *

   *     Send   *

   *----------------------*/

        private void SendCallBack(IAsyncResult IAR)

        {

            string message = (string)IAR.AsyncState;

            //데이터 전송에 있어서 공백이 '\0'로 채워질수 있기 때문에 이를 방지하기위해 trim() 함수를 사용한다.

            message = message.Trim('\0');

            tbDebug.Text += "\r\n\r\nBASE64ENCODING ( AES256 ( SEND DATA ) ) : " + message;



        }







        /*----------------------*

   *    Receive   *

   *----------------------*/

        public void Receive()

        {



            cbSock.BeginReceive(this.recvBuffer, 0, recvBuffer.Length,

                SocketFlags.None, new AsyncCallback(OnReceiveCallBack), cbSock);

        }



        /*----------------------*

   * ##### CallBack ##### *

   *    Receive   *

   *----------------------*/

        private void OnReceiveCallBack(IAsyncResult IAR)

        {

            try

            {

                Socket tempSock = (Socket)IAR.AsyncState;

                int nReadSize = tempSock.EndReceive(IAR);

                if (nReadSize != 0)

                {



                    tbDebug.Text += "\r\n\r\n--------------  R E C E I V E  -------------";

                    //수신받은 데이터의 나머지부분이 '\0'로 채워진다. 그렇게 되면 복호화가 되지않기 때문에 trim() 함수를 사용하여 제거한다.

                    recvString = Encoding.UTF8.GetString(recvBuffer).Trim('\0');

                    Array.Clear(recvBuffer, 0, recvBuffer.Length);



                    tbDebug.Text += "\r\n\r\nBASE64ENCODING ( AES256 ( RECEIVE DATA ) ) : " + recvString;



                    //복호화

                    string chiper = AES_decrypt(recvString, "01234567890123456789012345678901");

                    this.tbDebug.Text += "\r\n\r\nRECEIVE DATA : " + chiper;





                }

                this.Receive();

            }

            catch (SocketException se)

            {

                if (se.SocketErrorCode == SocketError.ConnectionReset)

                {

                    this.BeginConnect();

                }

            }

        }



        //AES256 암호화

        public String AES_encrypt(String Input, String key)

        {

            RijndaelManaged aes = new RijndaelManaged();

            aes.KeySize = 256;

            aes.BlockSize = 128;

            aes.Mode = CipherMode.CBC;

            aes.Padding = PaddingMode.PKCS7;

            aes.Key = Encoding.UTF8.GetBytes(key);

            aes.IV = Encoding.UTF8.GetBytes("0123456789012345");



            var encrypt = aes.CreateEncryptor(aes.Key, aes.IV);

            byte[] xBuff = null;

            using (var ms = new MemoryStream())

            {

                using (var cs = new CryptoStream(ms, encrypt, CryptoStreamMode.Write))

                {

                    byte[] xXml = Encoding.UTF8.GetBytes(Input);



                    cs.Write(xXml, 0, xXml.Length);

                }



                xBuff = ms.ToArray();

                string recvdata = Encoding.Default.GetString(xBuff);

                tbDebug.Text += "\r\n\r\nAES256 ( SEND DATA ) : " + recvdata;

            }



            string Output = Convert.ToBase64String(xBuff);

            return Output;

        }

        //AES 256 복호화

        public string AES_decrypt(string Input, string key)

        {

            RijndaelManaged aes = new RijndaelManaged();

            aes.KeySize = 256;

            aes.BlockSize = 128;

            aes.Mode = CipherMode.CBC;

            aes.Padding = PaddingMode.PKCS7;

            aes.Key = Encoding.UTF8.GetBytes(key);

            aes.IV = Encoding.UTF8.GetBytes("0123456789012345");



            var decrypt = aes.CreateDecryptor();

            byte[] xBuff = null;

            using (var ms = new MemoryStream())

            {



                using (var cs = new CryptoStream(ms, decrypt, CryptoStreamMode.Write))

                {

                    byte[] xXml = Convert.FromBase64String(Input);

                    string recvdata = Encoding.Default.GetString(xXml);

                    tbDebug.Text += "\r\n\r\nAES256 ( RECEIVE DATA ) : " + recvdata;





                    cs.Write(xXml, 0, xXml.Length);

                }



                xBuff = ms.ToArray();

            }



            string Output = Encoding.UTF8.GetString(xBuff);

            return Output;

        }







        private void Form1_Load(object sender, EventArgs e)

        {

        }



        private void textBox1_TextChanged(object sender, EventArgs e)

        {

            Enter_key = textBox1.Text;



        }



        private void button1_Click(object sender, EventArgs e)

        {

            if (Enter_key != "")

            {

                this.BeginSend(Enter_key);

                textBox1.Text = "";

            }

        }



        private void textBox1_KeyDown(object sender, KeyEventArgs e)

        {

            if (e.KeyCode == Keys.Enter)

            {

                button1_Click(sender, e);

            }

        }

    }

}